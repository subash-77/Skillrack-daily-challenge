Optimum Jumps. You are given an array A of N integers. You have to find the minimum cost that is required to cross the array by jumping from one element to another. You need to start from the first element of the array and you can jump in both directions, but the length of the forwarding jump must be two andlength of the backward jump must be one.

The cost of forwarding and backward jump is the value of the element from which you are jumping, that is, the cost of jumping from ith Index to (i+2)th and the cost of jumping from ith Index to (i-1)th Index is the value of ith Element of the array A.

If you are at the last element of the array then you can jump out of the array and cost of that jump will be the value of the last element of array A. 

Input format:


First line: N(size of the array)
Second line: N space seperated integers of the array.
Output format:

Print the cost in a single line.
Constraints:

1<=N<=105 
1 <= A[i] <= 109
Input: 5
       1 2 3 4 100
Output: 10
Explanation:

The cost of the forward jump from 1st Element to 3rd Element is 1.
The cost of the backward jump from 3rd Element to 2nd Element is 3.
The cost of the forward jump from 2nd Element to 4th Element is 2.
The cost of the forward jump from 4th Element to out of the array is 4.
Total cost = 1 + 3 + 2 + 4 = 10

CODE:


#include <stdio.h>

int main()
{
    int n;
    scanf("%d",&n);
    int a[n];
    int x=0,y=0;
    int j=0,sum=0;
    int f=0;
    for(int i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<n;i++)
    {
        
        sum=sum+a[j];
        
        
        j=j+2;
        if(x%2==0)
        {
            
            sum=sum+a[j];
            
            --j;
            y=y+2;
            if(y==n-1)
            {
                f++;
            }
            //printf("*%d\n\t",y);
            
        }
        else
        {
            y=y+1;
        }
        x++;
        i=y;
        
        
    }
   //printf("**%d\n\t",y);
   if(y==n-1 && f==0)
   {
       sum=sum+a[n-1];
   }
    printf("%d",sum);

    return 0;
}
